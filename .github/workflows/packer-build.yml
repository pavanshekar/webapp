name: Packer CI - AMI Build

on:
  workflow_run:
    workflows: ["Node.js CI"]
    types:
      - completed
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    if: >
      github.event.workflow_run.conclusion == 'success' &&
      github.repository == 'NEU-Cloud-CSYE6225/webapp'
    steps:
    - uses: actions/checkout@v3

    - name: Archive the Repository
      run: |
        zip -r app.zip AssignmentsAPI

    - name: Create .env
      run: |
        echo PORT=${{ secrets.PORT }} >> .env
        echo DB_HOST=${{ secrets.DB_HOST }} >> .env
        echo DB_PORT=${{ secrets.DB_PORT }} >> .env
        echo DB_USER=${{ secrets.DB_USER }} >> .env
        echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
        echo DB_DATABASE=${{ secrets.DB_DATABASE }} >> .env
        echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
    
    - name: Setup Packer
      run: |
        curl -Lo packer.zip https://releases.hashicorp.com/packer/1.9.4/packer_1.9.4_linux_amd64.zip
        unzip packer.zip
        sudo mv packer /usr/local/bin/

    - name: Initialize Packer
      run: packer init aws-debian.pkr.hcl

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Build AMI
      run: packer build aws-debian.pkr.hcl
      env:
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_DATABASE: ${{ secrets.DB_DATABASE }}
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}
        PORT: ${{ secrets.PORT }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}

    - name: Retrieve AMI ID
      run: |
        AMI_ID=$(jq -r '.builds[0].artifact_id' manifest.json | cut -d ':' -f 2)
        echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV

    - name: Share AMI with DEMO Account
      run: |
        DEMO_ACCOUNT_ID="565864190124"
        aws ec2 modify-image-attribute --image-id ${{ env.AMI_ID }} --launch-permission "Add=[{UserId=$DEMO_ACCOUNT_ID}]"
      env:
        AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
        AMI_ID: ${{ env.AMI_ID }}

    - name: Configure AWS Credentials for Dev
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Fetch Launch Template ID for Dev
      run: |
        DEV_LAUNCH_TEMPLATE_ID=$(aws ec2 describe-launch-templates --filters "Name=launch-template-name,Values=<DEV_LAUNCH_TEMPLATE_NAME>" --query 'LaunchTemplates[0].LaunchTemplateId' --output text)
        if [ -z "$DEV_LAUNCH_TEMPLATE_ID" ] || [ "$DEV_LAUNCH_TEMPLATE_ID" == "None" ]; then
          echo "DEV_LAUNCH_TEMPLATE_ID=NotFound" >> $GITHUB_ENV
        else
          echo "DEV_LAUNCH_TEMPLATE_ID=$DEV_LAUNCH_TEMPLATE_ID" >> $GITHUB_ENV
        fi

    - name: Fetch Auto-Scaling Group Name for Dev
      run: |
        DEV_AUTOSCALING_GROUP_NAME=$(aws autoscaling describe-auto-scaling-groups --query 'AutoScalingGroups[?contains(AutoScalingGroupName,`<DEV_AUTOSCALING_GROUP_PART>`)].AutoScalingGroupName' --output text)
        if [ -z "$DEV_AUTOSCALING_GROUP_NAME" ] || [ "$DEV_AUTOSCALING_GROUP_NAME" == "None" ]; then
          echo "DEV_AUTOSCALING_GROUP_NAME=NotFound" >> $GITHUB_ENV
        else
          echo "DEV_AUTOSCALING_GROUP_NAME=$DEV_AUTOSCALING_GROUP_NAME" >> $GITHUB_ENV
        fi

    - name: Create New Launch Template Version for Dev
      if: env.DEV_LAUNCH_TEMPLATE_ID != 'NotFound' && env.DEV_AUTOSCALING_GROUP_NAME != 'NotFound'
      run: |
        DEV_LT_VERSION=$(aws ec2 create-launch-template-version --launch-template-id ${{ env.DEV_LAUNCH_TEMPLATE_ID }} --source-version '$Latest' --launch-template-data '{"ImageId": "${{ env.AMI_ID }}"}' --query 'LaunchTemplateVersion.VersionNumber' --output text)
        echo "DEV_LT_VERSION=$DEV_LT_VERSION" >> $GITHUB_ENV

    - name: Refresh Dev Auto-Scaling Group
      if: env.DEV_LAUNCH_TEMPLATE_ID != 'NotFound' && env.DEV_AUTOSCALING_GROUP_NAME != 'NotFound'
      run: |
        aws autoscaling start-instance-refresh --auto-scaling-group-name ${{ env.DEV_AUTOSCALING_GROUP_NAME }} --launch-template '{"Version": "${{ env.DEV_LT_VERSION }}"}'

    - name: Wait for Dev Instance Refresh
      if: env.DEV_LAUNCH_TEMPLATE_ID != 'NotFound' && env.DEV_AUTOSCALING_GROUP_NAME != 'NotFound'
      run: |
        while :; do
          DEV_STATUS=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name ${{ env.DEV_AUTOSCALING_GROUP_NAME }} --query 'InstanceRefreshes[0].Status' --output text)
          if [[ $DEV_STATUS == "Successful" ]]; then
            echo "Dev instance refresh completed successfully"
            break
          elif [[ $DEV_STATUS == "Failed" ]]; then
            echo "Dev instance refresh failed"
            exit 1
          else
            echo "Waiting for dev instance refresh..."
            sleep 30
          fi
        done

    - name: Configure AWS Credentials for Demo
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Fetch Launch Template ID for Demo
      run: |
        DEMO_LAUNCH_TEMPLATE_ID=$(aws ec2 describe-launch-templates --filters "Name=launch-template-name,Values=<DEMO_LAUNCH_TEMPLATE_NAME>" --query 'LaunchTemplates[0].LaunchTemplateId' --output text)
        if [ -z "$DEMO_LAUNCH_TEMPLATE_ID" ] || [ "$DEMO_LAUNCH_TEMPLATE_ID" == "None" ]; then
          echo "DEMO_LAUNCH_TEMPLATE_ID=NotFound" >> $GITHUB_ENV
        else
          echo "DEMO_LAUNCH_TEMPLATE_ID=$DEMO_LAUNCH_TEMPLATE_ID" >> $GITHUB_ENV
        fi

    - name: Fetch Auto-Scaling Group Name for Demo
      run: |
        DEMO_AUTOSCALING_GROUP_NAME=$(aws autoscaling describe-auto-scaling-groups --query 'AutoScalingGroups[?contains(AutoScalingGroupName,`<DEMO_AUTOSCALING_GROUP_PART>`)].AutoScalingGroupName' --output text)
        if [ -z "$DEMO_AUTOSCALING_GROUP_NAME" ] || [ "$DEMO_AUTOSCALING_GROUP_NAME" == "None" ]; then
          echo "DEMO_AUTOSCALING_GROUP_NAME=NotFound" >> $GITHUB_ENV
        else
          echo "DEMO_AUTOSCALING_GROUP_NAME=$DEMO_AUTOSCALING_GROUP_NAME" >> $GITHUB_ENV
        fi

    - name: Create New Launch Template Version for Demo
      if: env.DEMO_LAUNCH_TEMPLATE_ID != 'NotFound' && env.DEMO_AUTOSCALING_GROUP_NAME != 'NotFound'
      run: |
        DEMO_LT_VERSION=$(aws ec2 create-launch-template-version --launch-template-id ${{ env.DEMO_LAUNCH_TEMPLATE_ID }} --source-version '$Latest' --launch-template-data '{"ImageId": "${{ env.AMI_ID }}"}' --query 'LaunchTemplateVersion.VersionNumber' --output text)
        echo "DEMO_LT_VERSION=$DEMO_LT_VERSION" >> $GITHUB_ENV

    - name: Refresh Demo Auto-Scaling Group
      if: env.DEMO_LAUNCH_TEMPLATE_ID != 'NotFound' && env.DEMO_AUTOSCALING_GROUP_NAME != 'NotFound'
      run: |
        aws autoscaling start-instance-refresh --auto-scaling-group-name ${{ env.DEMO_AUTOSCALING_GROUP_NAME }} --launch-template '{"Version": "${{ env.DEMO_LT_VERSION }}"}'

    - name: Wait for Demo Instance Refresh
      if: env.DEMO_LAUNCH_TEMPLATE_ID != 'NotFound' && env.DEMO_AUTOSCALING_GROUP_NAME != 'NotFound'
      run: |
        while :; do
          DEMO_STATUS=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name ${{ env.DEMO_AUTOSCALING_GROUP_NAME }} --query 'InstanceRefreshes[0].Status' --output text)
          if [[ $DEMO_STATUS == "Successful" ]]; then
            echo "Demo instance refresh completed successfully"
            break
          elif [[ $DEMO_STATUS == "Failed" ]]; then
            echo "Demo instance refresh failed"
            exit 1
          else
            echo "Waiting for demo instance refresh..."
            sleep 30
          fi
        done


